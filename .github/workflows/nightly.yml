name: Nightly
on:
  schedule:
    - cron: '0 0 * * *' # Every day at midnight
  push:
    paths:
      - '.github/workflows/nightly.yml'
      - 'scripts/**'
  pull_request:
    paths:
      - '.github/workflows/nightly.yml'
      - 'scripts/**'

jobs:
  devops:
    name: DevOps nightly image build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        if: github.event_name == 'schedule'
        with:
          ref: main

      - uses: actions/checkout@v2
        if: github.event_name != 'schedule'

      # Build images
      - name: Install package and build image
        run: |
          ./scripts/build.sh

      # Log into image registries
      - name: Log into Docker Hub
        run: echo "${{ secrets.WBIA_WILDMEBOT_DOCKER_HUB_TOKEN }}" | docker login -u wildmebot --password-stdin
      - name: Log into GitHub Packages
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      # Push images out to image registries
      - name: Push to GitHub Packages
        run: ./scripts/publish.sh -t nightly -r docker.pkg.github.com houston
      - name: Push to Docker Hub
        if: github.event_name == 'schedule'
        run: ./scripts/publish.sh -t nightly houston

      # Notify status in Slack
      - name: Slack Notification
        if: failure() && github.event_name == 'schedule'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: dev-houston
          SLACK_COLOR: '#FF0000'
          SLACK_ICON: https://avatars.slack-edge.com/2020-03-02/965719891842_db87aa21ccb61076f236_44.png
          SLACK_MESSAGE: 'nightly build failed :sob:'
          SLACK_USERNAME: "Nightly"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  test_macos:
    runs-on: macos-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        python-version: [3.9, 3.8, 3.7]
    env:
      HOUSTON_DOTENV: ./.env
    steps:
      # Checkout and env setup
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install libmagic on macOS
        run: |
          brew install libmagic

      - name: Install & Configure Houston
        run: |
          pip install "python-dotenv[cli]"
          # Set secrets
          dotenv -f ${HOUSTON_DOTENV} set GITLAB_REMOTE_LOGIN_PAT -- "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          dotenv -f ${HOUSTON_DOTENV} set SECRET_KEY -- "secret"
          dotenv -f ${HOUSTON_DOTENV} set EDM_AUTHENTICATIONS_USERNAME__DEFAULT -- "${{ secrets.EDM_AUTHENTICATIONS_USERNAME__DEFAULT }}"
          dotenv -f ${HOUSTON_DOTENV} set EDM_AUTHENTICATIONS_PASSWORD__DEFAULT -- "${{ secrets.EDM_AUTHENTICATIONS_PASSWORD__DEFAULT }}"
          # Install application
          ./scripts/install.sh

      - name: Check connectivity to required services
        run: |
          source virtualenv/houston3.7/bin/activate
          invoke app.integrations.check

      - name: Create frontend static directory (tests complains if static directory does not exist)
        run: |
          mkdir -p app/static/dist-latest
          touch app/static/dist-latest/404.html
          touch app/static/dist-latest/index.html

      - name: Run tests (random x3)
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"

      - name: Check DB migrations
        run: |
          source virtualenv/houston3.7/bin/activate
          # initialize the database
          invoke app.db.upgrade --no-backup
          # downgrade to the previous migration step
          invoke app.db.downgrade
          # upgrade to the latest version
          invoke app.db.upgrade

      - name: Run tests after DB checks
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"

      # Notify status in Slack
      - name: Slack Notification
        if: failure() && github.event_name == 'schedule'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: dev-houston
          SLACK_COLOR: '#FF0000'
          SLACK_ICON: https://avatars.slack-edge.com/2020-03-02/965719891842_db87aa21ccb61076f236_44.png
          SLACK_MESSAGE: 'nightly test on MacOS failed :sob:'
          SLACK_USERNAME: "Nightly"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        python-version: [3.9, 3.8, 3.7]
        db-uri: ["postgresql://postgres:testing@localhost/postgres", "sqlite://"]
    services:
      db:
        image: postgres:10
        env:
          POSTGRES_PASSWORD: testing
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
    env:
      OS: ubuntu-latest
      PYTHON: ${{ matrix.python-version }}
      SQLALCHEMY_DATABASE_URI: ${{ matrix.db-uri }}
      GITLAB_REMOTE_LOGIN_PAT: ${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}
      HOUSTON_DOTENV: ./.env
    steps:
      # Checkout and env setup
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install libmagic on Ubuntu
        run: |
          sudo apt install libmagic1

      - name: Install & Configure Houston
        run: |
          pip install "python-dotenv[cli]"
          # Set secrets
          dotenv -f ${HOUSTON_DOTENV} set GITLAB_REMOTE_LOGIN_PAT -- "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          dotenv -f ${HOUSTON_DOTENV} set SECRET_KEY -- "secret"
          dotenv -f ${HOUSTON_DOTENV} set EDM_AUTHENTICATIONS_USERNAME__DEFAULT -- "${{ secrets.EDM_AUTHENTICATIONS_USERNAME__DEFAULT }}"
          dotenv -f ${HOUSTON_DOTENV} set EDM_AUTHENTICATIONS_PASSWORD__DEFAULT -- "${{ secrets.EDM_AUTHENTICATIONS_PASSWORD__DEFAULT }}"
          # Install application
          ./scripts/install.sh

      - name: Create frontend static directory (tests complains if static directory does not exist)
        run: |
          mkdir -p app/static/dist-latest
          touch app/static/dist-latest/404.html
          touch app/static/dist-latest/index.html

      - name: Check connectivity to required services
        run: |
          source virtualenv/houston3.7/bin/activate
          invoke app.integrations.check

      - name: Run tests (random x3)
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"

      - name: Check DB migrations (sqlite)
        if: matrix.db-uri == 'sqlite://'
        run: |
          source virtualenv/houston3.7/bin/activate
          # initialize the database
          invoke app.db.upgrade --no-backup
          # downgrade to the previous migration step
          invoke app.db.downgrade
          # upgrade to the latest version
          invoke app.db.upgrade
        env:
          # Don't use in memory sqlite database for database migration
          SQLALCHEMY_DATABASE_URI: ''

      - name: Check DB migrations (postgresql)
        if: matrix.db-uri != 'sqlite://'
        run: |
          source virtualenv/houston3.7/bin/activate
          invoke app.db.upgrade --no-backup
          invoke app.db.downgrade
          invoke app.db.upgrade --no-backup
          if [ -n "$(invoke app.db.migrate)" ]; then echo Missing database migration; exit 1; fi

      - name: Run tests after DB checks
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest --no-cov -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"

      # Notify status in Slack
      - name: Slack Notification
        if: failure() && github.event_name == 'schedule'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: dev-houston
          SLACK_COLOR: '#FF0000'
          SLACK_ICON: https://avatars.slack-edge.com/2020-03-02/965719891842_db87aa21ccb61076f236_44.png
          SLACK_MESSAGE: 'nightly tests on Linux failed :sob:'
          SLACK_USERNAME: "Nightly"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
