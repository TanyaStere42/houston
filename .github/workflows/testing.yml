# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Testing

on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Use the same Python version used the Dockerfile
        python-version: [3.9]

    steps:
      # Checkout and env setup
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint
          restore-keys: |
            ${{ runner.os }}-pip-lint

      # Lint things before going any further
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --show-source --statistics
          # exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --max-complexity=10 --statistics

  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        # Use the same Python version used the Dockerfile
        python-version: [3.9]
        db-uri: ["postgresql://postgres:testing@localhost/postgres", "sqlite://"]
    services:
      db:
        image: postgres:10
        env:
          POSTGRES_PASSWORD: testing
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
    env:
      OS: ubuntu-latest
      PYTHON: ${{ matrix.python-version }}
      SQLALCHEMY_DATABASE_URI: ${{ matrix.db-uri }}
      GITLAB_REMOTE_LOGIN_PAT: ${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}
    steps:
      # Checkout and env setup
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install libmagic on Ubuntu
        run: |
          sudo apt install libmagic1

      # Install and test - Test order is randomized, run three times to ensure correctness
      - name: Reset local database
        run: |
          tar -zxvf _db.initial.tar.gz
          mv _db.initial _db
          ./scripts/install.sh

      - name: Create frontend static directory (tests complains if static directory does not exist)
        run: |
          mkdir -p app/static/dist-latest
          touch app/static/dist-latest/404.html
          touch app/static/dist-latest/index.html

      - name: Run tests (random x3)
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"

      - name: Check DB migrations (sqlite)
        if: matrix.db-uri == 'sqlite://'
        run: |
          source virtualenv/houston3.7/bin/activate
          invoke app.db.downgrade
          invoke app.db.upgrade
        env:
          # Don't use in memory sqlite database for database migration
          SQLALCHEMY_DATABASE_URI: ''

      - name: Check DB migrations (postgresql)
        if: matrix.db-uri != 'sqlite://'
        run: |
          source virtualenv/houston3.7/bin/activate
          coverage run `which invoke` app.db.upgrade --no-backup
          coverage run --append `which invoke` app.db.downgrade
          coverage run --append `which invoke` app.db.upgrade --no-backup
          if [ -n "$(coverage run --append `which invoke` app.db.migrate)" ]; then echo Missing database migration; exit 1; fi

      - name: Run tests after DB checks
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest --no-cov -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}"

      - name: Run Codecov (3.9)
        if: matrix.python-version == '3.9'
        continue-on-error: true
        run: |
          source virtualenv/houston3.7/bin/activate
          pytest -s -v --gitlab-remote-login-pat "${{ secrets.GITLAB_REMOTE_LOGIN_PAT }}" --cov=./ --cov-append
          pytest -s -v -m separate tests/test_transactions.py::test_transactions[None-request_transaction] --cov-append
          pytest -s -v -m separate tests/test_transactions.py::test_transactions[None-commit_or_abort] --cov-append

      - name: Run other invoke tasks for coverage and errors
        if: matrix.python-version == '3.9'
        run: |
          source virtualenv/houston3.7/bin/activate
          ./scripts/run_tasks_for_coverage.sh
          coverage xml

      - name: Upload coverage to Codecov (3.9)
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v1.2.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./_coverage/coverage.xml
          env_vars: OS,PYTHON,SQLALCHEMY_DATABASE_URI
          fail_ci_if_error: true
